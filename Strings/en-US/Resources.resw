<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="appDescription" xml:space="preserve">
    <value>An app that calculates mathematical expressions.</value>
  </data>
  <data name="appName" xml:space="preserve">
    <value>CalcIt</value>
    <comment>Should be kept as-is.</comment>
  </data>
  <data name="buttonAddVariable.ToolTipService.ToolTip" xml:space="preserve">
    <value>Add a new variable to watch</value>
  </data>
  <data name="buttonCalculate.Content" xml:space="preserve">
    <value>Calculate</value>
  </data>
  <data name="buttonCalculateSmall.ToolTipService.ToolTip" xml:space="preserve">
    <value>Calculate</value>
  </data>
  <data name="buttonClear.ToolTipService.ToolTip" xml:space="preserve">
    <value>Clear output</value>
  </data>
  <data name="buttonCloseSettings.ToolTipService.ToolTip" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="buttonEditStartupExpressions.Content" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="buttonHelp.ToolTipService.ToolTip" xml:space="preserve">
    <value>Help and about</value>
  </data>
  <data name="buttonRestartApp.Content" xml:space="preserve">
    <value>Restart app</value>
  </data>
  <data name="buttonSettings.ToolTipService.ToolTip" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="buttonViewVariables.ToolTipService.ToolTip" xml:space="preserve">
    <value>View variables</value>
  </data>
  <data name="checkCalculateLastIfEmpty.Header" xml:space="preserve">
    <value>Calculate the last expression if input is empty</value>
    <comment>Don't put a period.</comment>
  </data>
  <data name="checkCalculateLastIfEmpty.OffContent" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="checkCalculateLastIfEmpty.OnContent" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="checkEnforceDecimalSeparator.Content" xml:space="preserve">
    <value>Enforce</value>
    <comment>This box is in the "Decimal separator" section, so no need to include "decimal separator" here.</comment>
  </data>
  <data name="checkShowIntermediateCalculations.Header" xml:space="preserve">
    <value>Show intermediate calculations when multiple expressions are entered</value>
  </data>
  <data name="checkShowIntermediateCalculations.OffContent" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="checkShowIntermediateCalculations.OnContent" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="checkUseOldOutputBox.Content" xml:space="preserve">
    <value>Use plain text box for output</value>
  </data>
  <data name="commandCopyAll.Text" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="commandCopyExpression.Text" xml:space="preserve">
    <value>    Only expression</value>
    <comment>Put 4 spaces to the beginning.</comment>
  </data>
  <data name="commandCopyResult.Text" xml:space="preserve">
    <value>    Only result</value>
    <comment>Put 4 spaces to the beginning.</comment>
  </data>
  <data name="dialogHelpAndAbout.PrimaryButtonText" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="dialogHelpAndAbout.Title" xml:space="preserve">
    <value>Help and about</value>
  </data>
  <data name="error.braceInvolved" xml:space="preserve">
    <value>Brace is involved as an operator. This is a BUG, report it to the author.</value>
  </data>
  <data name="error.divisionByZero" xml:space="preserve">
    <value>Division by zero.</value>
  </data>
  <data name="error.header" xml:space="preserve">
    <value>ERROR: </value>
  </data>
  <data name="error.headerStartup.xy" xml:space="preserve">
    <value>ERROR in startup expressions file at ({0}; {1}): </value>
  </data>
  <data name="error.headerStartup.y" xml:space="preserve">
    <value>ERROR in startup expressions file at line {0}: </value>
  </data>
  <data name="error.invalidArccosArg" xml:space="preserve">
    <value>Invalid arccosine function argument.</value>
  </data>
  <data name="error.invalidArcsinArg" xml:space="preserve">
    <value>Invalid arcsine function argument.</value>
  </data>
  <data name="error.invalidCombinationNegativeArgs" xml:space="preserve">
    <value>Combination function's arguments must not be negative.</value>
  </data>
  <data name="error.invalidCombinationNumArgs" xml:space="preserve">
    <value>Combination function must receive exactly 2 arguments.</value>
  </data>
  <data name="error.invalidComparisonNumArgs" xml:space="preserve">
    <value>Comparison function must receive at least 2 arguments.</value>
  </data>
  <data name="error.invalidDateDayOutOfRange" xml:space="preserve">
    <value>Date function's day is outside of range.</value>
  </data>
  <data name="error.invalidDateMonthOutOfRange" xml:space="preserve">
    <value>Date function's month when rounded must be from 1 to 12.</value>
  </data>
  <data name="error.invalidDateNumOfArgs" xml:space="preserve">
    <value>Date function only takes up to 6 arguments.</value>
  </data>
  <data name="error.invalidFactorialArg" xml:space="preserve">
    <value>Factorial function's argument must not be negative.</value>
  </data>
  <data name="error.invalidIfNumArgs" xml:space="preserve">
    <value>Conditional function only takes up to 3 arguments.</value>
  </data>
  <data name="error.invalidLogBase" xml:space="preserve">
    <value>Logarithm function's base must be positive.</value>
  </data>
  <data name="error.invalidLogInput" xml:space="preserve">
    <value>Logarithm function's input must be positive.</value>
  </data>
  <data name="error.invalidNotNumArgs" xml:space="preserve">
    <value>Not function only takes 1 argument.</value>
  </data>
  <data name="error.invalidPermutationNegativeArgs" xml:space="preserve">
    <value>Permutation function's arguments must not be negative.</value>
  </data>
  <data name="error.invalidPermutationNumArgs" xml:space="preserve">
    <value>Permutation function must receive exactly 2 arguments.</value>
  </data>
  <data name="error.invalidRandomNoIntegerBetween" xml:space="preserve">
    <value>Random integer function's arguments have no integers in between.</value>
  </data>
  <data name="error.invalidRandomNumArgs" xml:space="preserve">
    <value>Random function only takes up to 2 arguments.</value>
  </data>
  <data name="error.invalidVariable" xml:space="preserve">
    <value>Invalid variable name: "{0}". It must not start with a digit.</value>
  </data>
  <data name="error.level0Root" xml:space="preserve">
    <value>Level 0 root occured.</value>
  </data>
  <data name="error.nonAlphanumericVariableName" xml:space="preserve">
    <value>Invalid variable name: "{0}". It must only consist of alphanumeric characters and underscores.</value>
  </data>
  <data name="error.nothingToCalculate" xml:space="preserve">
    <value>There is nothing to calculate.</value>
  </data>
  <data name="error.numberOutOfRange" xml:space="preserve">
    <value>Numbers involved in the calculation are too large or too small.</value>
  </data>
  <data name="error.reservedVariable" xml:space="preserve">
    <value>Ans and PreAns are reserved variables and cannot be set.</value>
  </data>
  <data name="error.trailingSign" xml:space="preserve">
    <value>Trailing positive/negative sign.</value>
  </data>
  <data name="error.unexpectedClosingBrace" xml:space="preserve">
    <value>Unexpected closing brace.</value>
  </data>
  <data name="error.unexpectedDecimalSeparator" xml:space="preserve">
    <value>Unexpected decimal separator.</value>
  </data>
  <data name="error.unexpectedDigit" xml:space="preserve">
    <value>Unexpected digit.</value>
  </data>
  <data name="error.unexpectedEnd" xml:space="preserve">
    <value>Unexpected end.</value>
  </data>
  <data name="error.unexpectedEqual" xml:space="preserve">
    <value>Unexpected equal sign.</value>
  </data>
  <data name="error.unexpectedOperand" xml:space="preserve">
    <value>Unexpected operand.</value>
  </data>
  <data name="error.unexpectedPercent" xml:space="preserve">
    <value>Unexpected percent sign.</value>
  </data>
  <data name="error.unexpectedSemicolon" xml:space="preserve">
    <value>Unexpected semicolon.</value>
  </data>
  <data name="error.unexpectedThousandSeparator" xml:space="preserve">
    <value>Unexpected thousand separator.</value>
  </data>
  <data name="error.unknownFunction" xml:space="preserve">
    <value>Unknown function: "{0}".</value>
  </data>
  <data name="error.unknownSymbol" xml:space="preserve">
    <value>Unknown symbol.</value>
  </data>
  <data name="error.unmatchingBraces" xml:space="preserve">
    <value>Unmatching braces.</value>
  </data>
  <data name="error.unsupportedExponentiation" xml:space="preserve">
    <value>Unsupported exponentiation: {0} ^ {1}.</value>
  </data>
  <data name="error.variableNotSet" xml:space="preserve">
    <value>Variable "{0}" is not set.</value>
  </data>
  <data name="getVarString.emptyVariableName" xml:space="preserve">
    <value>[Empty variable name.]</value>
  </data>
  <data name="getVarString.invalidVariableName" xml:space="preserve">
    <value>[Invalid variable name.]</value>
  </data>
  <data name="getVarString.numberOutOfRange" xml:space="preserve">
    <value>[Number too large or small.]</value>
  </data>
  <data name="getVarString.variableNotSet" xml:space="preserve">
    <value>[Variable not set.]</value>
  </data>
  <data name="inputBox.PlaceholderText" xml:space="preserve">
    <value>Enter any expresssion...</value>
  </data>
  <data name="labelAngleUnit.Text" xml:space="preserve">
    <value>Angle unit</value>
  </data>
  <data name="labelAppTheme.Text" xml:space="preserve">
    <value>App theme</value>
  </data>
  <data name="labelDecimalSeparator.Text" xml:space="preserve">
    <value>Decimal separator</value>
  </data>
  <data name="labelMoreComingSoon.Text" xml:space="preserve">
    <value>More coming soon...</value>
  </data>
  <data name="labelMultiplicationSign.Text" xml:space="preserve">
    <value>Multiplication sign</value>
  </data>
  <data name="labelStartupExpressions.Text" xml:space="preserve">
    <value>Startup expressions</value>
  </data>
  <data name="labelThousandSeparator.Text" xml:space="preserve">
    <value>Thousand separator</value>
  </data>
  <data name="labelUndefinedVariablesHandling.Text" xml:space="preserve">
    <value>When trying to retrieve undefined variables</value>
    <comment>Don't add colon, ellipsis or anything to the end.</comment>
  </data>
  <data name="labelVariables.Text" xml:space="preserve">
    <value>Variables</value>
  </data>
  <data name="linkDocumentation.Content" xml:space="preserve">
    <value>CalcIt documentation</value>
  </data>
  <data name="linkLicense.Content" xml:space="preserve">
    <value>License</value>
  </data>
  <data name="linkRepository.Content" xml:space="preserve">
    <value>GitHub repository</value>
  </data>
  <data name="outputBox.PlaceholderText" xml:space="preserve">
    <value>Output of the app will display here.</value>
  </data>
  <data name="radioAngleUnitDegree.Content" xml:space="preserve">
    <value>Degrees</value>
  </data>
  <data name="radioAngleUnitGrad.Content" xml:space="preserve">
    <value>Gradians</value>
  </data>
  <data name="radioAngleUnitRadian.Content" xml:space="preserve">
    <value>Radians</value>
  </data>
  <data name="radioDecimalSeparatorComma.Content" xml:space="preserve">
    <value>Comma</value>
  </data>
  <data name="radioDecimalSeparatorDot.Content" xml:space="preserve">
    <value>Dot</value>
  </data>
  <data name="radioDefaultUndefinedAs0.Content" xml:space="preserve">
    <value>Return 0</value>
  </data>
  <data name="radioMultiplicationAsterisk.Content" xml:space="preserve">
    <value>Asterisk</value>
  </data>
  <data name="radioMultiplicationDot.Content" xml:space="preserve">
    <value>Dot</value>
  </data>
  <data name="radioRaiseErrorForUndefinedVariables.Content" xml:space="preserve">
    <value>Raise error</value>
  </data>
  <data name="radioThemeDark.Content" xml:space="preserve">
    <value>Dark</value>
  </data>
  <data name="radioThemeDefault.Content" xml:space="preserve">
    <value>From Windows</value>
  </data>
  <data name="radioThemeLight.Content" xml:space="preserve">
    <value>Light</value>
  </data>
  <data name="radioThousandSeparatorDot.Content" xml:space="preserve">
    <value>Dot / Comma</value>
  </data>
  <data name="radioThousandSeparatorSpace.Content" xml:space="preserve">
    <value>Space</value>
  </data>
  <data name="settingsTitle.Text" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="sliderExpressionsInHistory.Header" xml:space="preserve">
    <value>Maximum expressions in history</value>
  </data>
  <data name="startupExpressionsDescription.Text" xml:space="preserve">
    <value>Press the button below to edit the startup expressions. After editing, restart the app to apply changes.</value>
  </data>
  <data name="text.newOutputNumberOutOfRange" xml:space="preserve">
    <value>The result is too large or too small to be displayed.</value>
  </data>
  <data name="text.oldOutputNumberOutOfRange" xml:space="preserve">
    <value>Number is too large or small.</value>
  </data>
  <data name="textEmptyOutputPanel.Text" xml:space="preserve">
    <value>Output of the app will display here.</value>
  </data>
  <data name="textSettingsChanged.Text" xml:space="preserve">
    <value>Settings have changed. The results above may not be in the current formats.</value>
  </data>
  <data name="textVersion" xml:space="preserve">
    <value>CalcIt UWP version {0}, build {1}</value>
    <comment>Don't put a period.</comment>
  </data>
  <data name="variableViewNameBox.PlaceholderText" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="variableViewRemoveButton.ToolTipService.ToolTip" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="variableViewValueBox.PlaceholderText" xml:space="preserve">
    <value>Value</value>
  </data>
</root>